// 运算符

package main

import "fmt"

func main() {
	// 一.算术运算符
	// + - * / % ++ --
	// 重点讲解 /
	// 如果运算的都是整数 那么结果是去掉小数部分 只留下整数部分的
	// 打印结果为3
	fmt.Println(10 / 3)

	// 如果希望保留小数部分 那么就需要有浮点数参与运算
	// 3.33333...
	fmt.Println(10.0 / 3)

	// ++ -- 使用细节
	// golang中 ++ -- 只能当作一个独立语句使用 不能这样使用
	// var num1 = 1
	// var num2 = num1++

	// ++ -- 只能写在变量后面 不能写在变量前面
	// 正确的
	var num3 = 1
	num3++
	num3--
	// 错误的
	// ++num3
	// --num3

	// 二.关系运算符
	// == > < != >= <= 最后结果为bool类型

	// 三.逻辑运算符
	// && || ! 最后结果为bool类型
	// true && true -> true 两个必须都为true
	// true || false -> true 一个为true即可

	// 短路操作
	// false && xxx 因为第一个条件为flase 已经不成立了（已经有结果了）所以不执行另一个条件代码了 直接返回第一个条件执行结果
	// true || xxx 因为第一个条件为true 已经成立了（已经有结果了）所以不执行另一个条件代码了 直接返回第一个条件执行结果
	// true && xxx 因为第一个条件为true 所以就要看第二个条件 语句的返回值就是第二个条件执行结果
	// false || xxx 因为第一个条件为false 所以就要看第二个条件 语句的返回值就是第二个条件执行结果

	// 四.常规赋值运算符
	// = += -= *= /= %=
	// a += b -> a = a + b

	// 五.其他运算符
	// & 获取变量对应的地址值
	// * 根据地址值获取对应内存空间中的具体值
	// 以上两个操作符 05章节有详细介绍

	// 六.位运算符（建议先看09章节原码 反码 补码 再回头看下列运算符）
	// 1.按位与 &  两位全为1 返回为1 否则为0
	// 例如 2&3
	// 2 补码[0000,0010]
	// 3 补码[0000,0011]
	//      [0000,0010] 2的第一位和3的第一位比较 两位都不为1 所以返回为0 以此类推
	// 2&3的二进制结果为[0000,0010] 转为十进制为2
	// 所以2&3的结果为2

	// 2.按位或 |  两位有一个为1 返回为1 否则为0
	// 例如 2|3
	// 2 补码[0000,0010]
	// 3 补码[0000,0011]
	//      [0000,0011]
	// 2|3的二进制结果为[0000,0011] 转为十进制为3
	// 所以2|3的结果为3

	// 3.按位异或 ^（两位不一样才取1）  两位一个为1 一个为0 返回为1 否则为0
	// 例如 2^3
	// 2 补码[0000,0010]
	// 3 补码[0000,0011]
	//      [0000,0001]
	// 2^3的二进制结果为[0000,0001] 转为十进制为1
	// 所以2^3的结果为1

	// 七.位移运算符
	// >> 右移 低位溢出 符号位不变 部分右移（高位补低位） 并用符号位补空缺的高位
	// 1 >> 2
	// 1 补码 [0000,0001]
	// 低位溢出2位 [0000,00__]
	// 符号位不变 部分右移（高位补低位） [00__,0000]
	// 符号位补空缺的高位 [0000,0000] 转为十进制为0
	// 1 >> 2 结果为0

	// << 左移 符号位不变 高位溢出 其他的数字都朝左平移 最后在低位的空位补零
	// 1 << 2
	// 1 补码 [0000,0001]
	// 符号位不变 高位溢出2位 [0__0,0001]
	// 其他的数字都朝左平移 [0000,01__]
	// 低位的空位补零 [0000,0100] 转为十进制为4
	// 1 << 2 结果为4
}
