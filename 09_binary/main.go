// 进制及原码 反码 补码

package main

import "fmt"

func main() {
	// 一.（二进制）
	// 满二进一

	var num = 10
	// %b 二进制输出
	fmt.Printf("%b \n", num)

	// 二.（八进制）
	// 满八进一 以数字0开头表示

	// 033（八进制）-> 27（十进制）
	var num2 = 033
	fmt.Println("num2:", num2)

	// 三.（十六进制）
	// 满十六进一 A-F -> 10-16 以0x或0X开头表示

	// 0x33（十六进制）-> 51（十进制）
	var num3 = 0x33
	fmt.Println("num3:", num3)

	// 四. 二进制转十进制
	// 从最低位开始（最右侧的数是最低位 越往左越高）
	// 将每个位上的数提取出来 乘以2的（位数-1）次方 然后求和
	// 1011
	// 1的位数是1
	// 1的位数是2
	// 0的位数是3
	// 1的位数是4

	// 五.八进制转十进制
	// 从最低位开始（最右侧的数是最低位 越往左越高）
	// 将每个位上的数提取出来 乘以8的（位数-1）次方 然后求和

	// 六.十六进制转十进制
	// 从最低位开始（最右侧的数是最低位 越往左越高）
	// 将每个位上的数提取出来 乘以16的（位数-1）次方 然后求和

	// 七.十进制转二进制
	// 将该数不断除以2 直到商为0为止 然后将每步得到的余数整体顺序倒过来 就是对应的二进制
	// 100 -> 1100100
	// 100 / 2 = 50 余0
	// 50 / 2 = 25 余0
	// 25 / 2 = 12 余1
	// 12 / 2 = 6 余0
	// 6 / 2 = 3 余0
	// 3 / 2 = 1 余1
	// 1 / 2 = 0 余1

	// 八.十进制转八进制
	// 将该数不断除以8 直到商为0为止 然后将每步得到的余数整体顺序倒过来 就是对应的八进制
	// 200 -> 310 因为八进制以0开头 所以为0310
	// 200 / 8 = 25 余0
	// 25 / 8 = 3 余1
	// 3 / 8 = 0 余3

	// 九.十进制转十六进制
	// 将该数不断除以16 直到商为0为止 然后将每步得到的余数整体顺序倒过来 就是对应的十六进制
	// 300 -> 12c 因为十六进制以0x开头 所以为0x12c
	// 200 / 16 = 18 余12 对应为c
	// 18 / 16 = 1 余2
	// 1 / 16 = 0 余1

	// 十.二进制转八进制
	// 将二进制数每三位一组（从低位开始组合）转成对应的八进制数即可

	// 十.二进制转十六进制
	// 将二进制数每四位一组（从低位开始组合）转成对应的十六进制数即可

	// 十一.八进制转二进制
	// 将八进制数每一位 转成一个对应的3位的二进制数即可

	// 十二.十六进制转二进制
	// 将十六进制数每一位 转成一个对应的4位的二进制数即可

	// 十三.原码 反码 补码
	// 1.二进制的最高位是符号位 0表示正数 1表示负数
	// 1在内存中 [0000,0001] 这八位中 第一个0是最高位 代表正数
	// -1在内存中 [1000,0001] 这八位中 第一个1是最高位 代表负数

	// 2.正数的 原码 反码 补码都一样
	// 正数1 原码[0000,0001] 反码[0000,0001] 补码[0000,0001]

	// 3.负数的反码 最高位不变 其他位取反（0变1 1变0）
	// -1 原码[1000,0001] 反码[1111,1110]

	// 4.负数的补码 反码的每一位为0的都加1
	// -1 反码[1111,1110] 补码[1111,1111]

	// 5. 0值
	// 0 原码[0000,0000] -0 原码[1000,0000]
	// 0 反码[0000,0000] -0 反码[1111,1111]
	// 0 补码[0000,0000] -0 补码[0000,0000]

}
